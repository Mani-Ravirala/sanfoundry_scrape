[
  {
    "id": "1",
    "questions": [
      {
        "text": "Which of the following is an utility of state elimination phenomenon?",
        "options": [
          { "optionText": "DFA to NFA", "isCorrect": false },
          { "optionText": "NFA to DFA", "isCorrect": false },
          { "optionText": "DFA to Regular Expression", "isCorrect": true },
          { "optionText": "All of the mentioned", "isCorrect": false }
        ]
      }
    ],
    "answer": "c",
    "explanation": "We use this algorithm to simplify a finite automaton to regular expression or vice versa. We eliminate states while converting given finite automata to its corresponding regular expression."
  },
  {
    "id": "2",
    "questions": [
      {
        "text": "If we have more than one accepting states or an accepting state with an outdegree, which of the following actions will be taken?",
        "options": [
          { "optionText": "addition of new state", "isCorrect": false },
          { "optionText": "removal of a state", "isCorrect": false },
          {
            "optionText": "make the newly added state as final",
            "isCorrect": false
          },
          { "optionText": "more than one option is correct", "isCorrect": true }
        ]
      }
    ],
    "answer": "d",
    "explanation": "If there is more than one accepting state or if the single accepting state as an out degree, add a new accepting state, make all other states non accepting, and hold an e-transitions from each former accepting state to the new accepting state."
  },
  {
    "id": "3",
    "questions": [
      {
        "text": "Which of the following is not a step in elimination of states procedure?",
        "options": [
          {
            "optionText": "Unifying all the final states into one using e-transitions",
            "isCorrect": false
          },
          {
            "optionText": "Unify single transitions to multi transitions that contains union of input",
            "isCorrect": true
          },
          {
            "optionText": "Remove states until there is only starting and accepting states",
            "isCorrect": false
          },
          {
            "optionText": "Get the resulting regular expression by direct calculation",
            "isCorrect": false
          }
        ]
      }
    ],
    "answer": "b",
    "explanation": "While eliminating the states, we unify multiple transitions to one transition that contains union of input and not the vice versa."
  },
  {
    "id": "4",
    "questions": [
      {
        "text": "Can the given state diagram be reduced?",
        "options": [
          {
            "optionText": "g src=\"https://www.sanfoundry.com/wp-content/uploads/2017/05/automata-theory-questions-answers-mcqs-q4.png\" alt=\"The state q2 can be eliminated with ease\" width=\"353\" height=\"144\" class=\"alignnone size-full wp-image-160562\" />",
            "isCorrect": true
          },
          { "optionText": "Yes", "isCorrect": false },
          { "optionText": "No", "isCorrect": false }
        ]
      }
    ],
    "answer": "a",
    "explanation": "The state q2 can be eliminated with ease and the reduced state diagram can be represented as:"
  },
  {
    "id": "5",
    "questions": [
      {
        "text": "Which of the following methods is suitable for conversion of DFA to RE?",
        "options": [
          { "optionText": "Brzozowski method", "isCorrect": true },
          { "optionText": "Arden’s method", "isCorrect": false },
          { "optionText": "Walter’s method", "isCorrect": false },
          { "optionText": "All of the mentioned", "isCorrect": false }
        ]
      }
    ],
    "answer": "a",
    "explanation": "Brzozowski method takes a unique approach to generating regular expressions. We create a system of regular expressions with one regular expression unknown for each state in M, and then we solve the system for Rλ where Rλ is the regular expression associated with starting state qλ."
  },
  {
    "id": "6",
    "questions": [
      {
        "text": "State true or false:",
        "options": [
          {
            "optionText": "tement: The state removal approach identifies patterns within the graph and removes state, building up regular expressions along each transition.",
            "isCorrect": true
          },
          { "optionText": "true", "isCorrect": false },
          { "optionText": "false", "isCorrect": false }
        ]
      }
    ],
    "answer": "a",
    "explanation": "This method has the advantage over the transitive closure technique as it can easily be visualized."
  },
  {
    "id": "7",
    "questions": [
      {
        "text": "The behaviour of NFA can be simulated using DFA.",
        "options": [
          { "optionText": "always", "isCorrect": true },
          { "optionText": "never", "isCorrect": false },
          { "optionText": "sometimes", "isCorrect": false },
          { "optionText": "none of the mentioned", "isCorrect": false }
        ]
      }
    ],
    "answer": "a",
    "explanation": "For every NFA, there exists an equivalent DFA and vice versa."
  },
  {
    "id": "8",
    "questions": [
      {
        "text": "It is suitable to use ____________ method/methods to convert a DFA to regular expression.",
        "options": [
          { "optionText": "Transitive Closure properties", "isCorrect": false },
          { "optionText": "Brzozowski method", "isCorrect": false },
          { "optionText": "State elimination method", "isCorrect": false },
          { "optionText": "All of the mentioned", "isCorrect": true }
        ]
      }
    ],
    "answer": "d",
    "explanation": "For converting RE to DFA , first we convert RE to NFA (Thompson Construction), and then NFA is converted into DFA(Subset Construction)."
  },
  {
    "id": "9",
    "questions": [
      {
        "text": "State true or false:",
        "options": [
          {
            "optionText": "tement: For every removed state, there is a regular expression produced.",
            "isCorrect": true
          },
          { "optionText": "true", "isCorrect": false },
          { "optionText": "false", "isCorrect": false }
        ]
      }
    ],
    "answer": "a",
    "explanation": "For every state which is eliminated, a new regular expression is produced. The newly generated regular expression act as an input for a state which is next to removed state."
  },
  {
    "id": "10",
    "questions": [
      {
        "text": " Is it possible to obtain more than one regular expression from a given DFA using the state elimination method?",
        "options": [
          { "optionText": "Yes", "isCorrect": true },
          { "optionText": "No", "isCorrect": false }
        ]
      }
    ],
    "answer": "a",
    "explanation": "Using different sequence of removal of state, we can have different possible solution of regular expressions. For n-state deterministic finite automata excluding starting and final states, n! Removal sequences are there. It is very tough to try all the possible removal sequences for smaller expressions."
  }
]
